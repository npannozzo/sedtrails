@startuml SedtrailComponentsTracer
!include ./c4/C4_Component.puml
' !theme C4_sandstone from ./c4/themes


title SedTRAILS: Component Diagram for Lagrangian Particle Tracer
scale 1.5

' terminilogy:
' pathway: a collection of particle positions and properties at different time steps    

AddElementTag("review", $bgColor="lightred", $fontColor="red", $borderColor="red")

Container(transportConverter, "Transport Converter", "Python", "An application that provides custom interfaces and methods for reading and converting 'transport flow-field data' to SedTRAILS compatible formats and physical units.")

Container(cache, "Simulation Cache and Recovery", "Python", "Provides functionality to recover simulation interuptions, allow restarts, and reuse simulation inputs and outputs to avoid redundant computations.")

Container(dataManager, "Data Management Module", "Python", "An application that manage data and files produced by the SedTRAILS Particle Tracer System")

Container(simOrchestrator, "Simulation Orchestrator", "Python", "Coordinates and manages the execution of SedTRAILS simulation tasks, including initialization, time-stepping, and termination procedures.")

Container_Boundary(sedtrailsTracer, "Parallel Lagrangian Particle Tracer"){ 
    Component(seedingTool, "Particle Seeder", "Python", "creates simulation particles with initial positions (x,y) and  particle's release times (t) using various particle release strategies")
    Component(tracingOrchestrator, "Particle Tracing Orchestrator", "Python", "Orchestrates the parallel execution of particle tracing routines using a multi-processing strategy. A process is assigned to each particle")
    Component(statusLibrary, "Particle Status Library", "Python", "Library of methods to determine a particle status types and burial state")
    Component(timer, "Timer", "Python", "manages simulation and execution times in the Lagra​ngian Particle Tracer")
    Component(particleStatusCalculator, "Particle Status Calculator", "Python",  "Applies status and burial methods to determine a particle's status (e.g., active, dead, alive, stuck, etc) and burial state on each time step​")
    Component(positionCalculator, "Particle Position Calculator", "Fortran/Python", "Calculates a particle's position for each time-step based on flow-field values, using Runge-Kutta 4 solver")
    Component(propertyInterpolator, "Particle Property Interpolator", "Python", "Interpolates particle properties at new position from scalar fields (e.g., depth, concentration)​")
    Component(diffusionLibrary, "Diffusion Library", "Python", "A library of methods to perform diffusion calculations​")
    
    Rel(simOrchestrator, tracingOrchestrator, "provides simulation configuration to", "Python object")
    Rel(tracingOrchestrator, timer, "initializes simulation time", "Python object")
    Rel(timer, positionCalculator, "provides current and next time-steps to", "Python object")
    Rel(tracingOrchestrator, positionCalculator, "provides initilized particles to", "Python object")
    Rel(tracingOrchestrator, seedingTool, "computes particles initial positions using", "Python object")
    Rel(positionCalculator, dataManager, "provides particles' positions and  interpolated properties to", "Data array")
    Rel(seedingTool, cache,  "caches particles initial positions to", "Python object")
    Rel(particleStatusCalculator, statusLibrary, "access methods from", "Python object")
    Rel(positionCalculator, diffusionLibrary, "access diffusion methods from", "Python object")
    Rel(positionCalculator, propertyInterpolator,"performs properties interpolation using", "Python object")
    Rel(positionCalculator, particleStatusCalculator, "determines particle's status and burial-state via", "Python object")
}

Rel(cache, dataManager, "stores and retrieves cached simulation states, flow-field data, and particle positions via", "Data array, Python object") 
Rel(transportConverter, cache,  "caches converted transport flow-field data", "Python") 
Rel(transportConverter,  positionCalculator, " provides converted transport flow-field data", "Python") 
Rel(cache, tracingOrchestrator, "provides cached flow-field data during simulation recovery", "Data array, Python object")

SHOW_LEGEND()
@enduml

